# Generated by Django 3.0.4 on 2020-03-31 23:59

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('city_id', models.IntegerField(db_column='CITY_ID', primary_key=True, serialize=False)),
                ('city_lat', models.FloatField(db_column='CITY_LAT')),
                ('city_long', models.FloatField(db_column='CITY_LONG')),
                ('city_zips', models.CharField(blank=True, db_column='CITY_ZIPS', max_length=45, null=True)),
                ('city_name', models.CharField(db_column='CITY_NAME', max_length=45)),
                ('city_state', models.CharField(blank=True, db_column='CITY_STATE', max_length=2, null=True)),
            ],
            options={
                'db_table': 'CITY',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('loc_id', models.AutoField(db_column='LOC_ID', primary_key=True, serialize=False)),
                ('loc_street', models.CharField(blank=True, db_column='LOC_STREET', max_length=45, null=True)),
                ('loc_zip', models.CharField(blank=True, db_column='LOC_ZIP', max_length=15, null=True)),
                ('loc_addr_num', models.CharField(blank=True, db_column='LOC_ADDR_NUM', max_length=10, null=True)),
                ('city', models.ForeignKey(db_column='CITY_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='geosound.City')),
            ],
            options={
                'db_table': 'LOCATION',
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('playlist_id', models.AutoField(db_column='PLAYLIST_ID', primary_key=True, serialize=False)),
                ('playlist_date_created', models.DateTimeField(db_column='PLAYLIST_DATE_CREATED')),
                ('playlist_date_modified', models.DateTimeField(db_column='PLAYLIST_DATE_MODIFIED')),
                ('playlist_name', models.CharField(db_column='PLAYLIST_NAME', max_length=45, unique=True)),
            ],
            options={
                'db_table': 'PLAYLIST',
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('song_id', models.IntegerField(db_column='SONG_ID', primary_key=True, serialize=False)),
                ('song_name', models.CharField(db_column='SONG_NAME', max_length=150)),
                ('song_artist', models.CharField(blank=True, db_column='SONG_ARTIST', max_length=60, null=True)),
                ('song_duration', models.IntegerField(blank=True, db_column='SONG_DURATION', null=True)),
                ('song_genre', models.CharField(blank=True, db_column='SONG_GENRE', max_length=50, null=True)),
                ('song_times_played', models.IntegerField(blank=True, db_column='SONG_TIMES_PLAYED', null=True)),
                ('song_year', models.IntegerField(blank=True, db_column='SONG_YEAR', null=True, validators=[django.core.validators.MinValueValidator(1950), django.core.validators.MaxValueValidator(2020)])),
            ],
            options={
                'db_table': 'SONG',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.AutoField(db_column='USER_ID', primary_key=True, serialize=False)),
                ('user_password', models.CharField(db_column='USER_PASSWORD', max_length=45)),
                ('user_email', models.CharField(db_column='USER_EMAIL', max_length=45, unique=True)),
                ('user_fname', models.CharField(db_column='USER_FNAME', max_length=45)),
                ('user_lname', models.CharField(db_column='USER_LNAME', max_length=45)),
                ('loc', models.ForeignKey(db_column='LOC_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='geosound.Location')),
            ],
            options={
                'db_table': 'USER',
            },
        ),
        migrations.CreateModel(
            name='UserPlayingSong',
            fields=[
                ('play_id', models.AutoField(db_column='PLAY_ID', primary_key=True, serialize=False)),
                ('play_time', models.DateTimeField(blank=True, db_column='PLAY_TIME', null=True)),
                ('song', models.ForeignKey(db_column='SONG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='geosound.Song')),
                ('user', models.ForeignKey(db_column='USER_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='geosound.User')),
            ],
            options={
                'db_table': 'USER_PLAYING_SONG',
            },
        ),
        migrations.CreateModel(
            name='SongInPlaylist',
            fields=[
                ('sip_id', models.AutoField(db_column='SIP_ID', primary_key=True, serialize=False)),
                ('sip_date_added', models.DateTimeField(blank=True, db_column='SIP_DATE_ADDED', null=True)),
                ('sip_times_played', models.IntegerField(blank=True, db_column='SIP_TIMES_PLAYED', null=True)),
                ('playlist', models.ForeignKey(db_column='PLAYLIST_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='geosound.Playlist')),
                ('song', models.ForeignKey(db_column='SONG_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='geosound.Song')),
            ],
            options={
                'db_table': 'SONG_IN_PLAYLIST',
            },
        ),
        migrations.AddField(
            model_name='playlist',
            name='user',
            field=models.ForeignKey(db_column='USER_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='geosound.User'),
        ),
    ]
